name: Main workflow

on:
  workflow_dispatch:

jobs:
  linter_test:
    name: Test backend with linter
    runs-on: ubuntu-latest
    steps:
      # Копирование репозитория из GitHub
      - uses: actions/checkout@v4
      - name: Set up Python
      # Установка python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.2
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./ecom/requirements.txt
      - name: Test with flake8
        run: |
          cd ecom/
          python -m flake8 .

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - linter_test
      # - pytest_test
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        # Авторизация на Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./ecom/
          push: true
          tags: dartanyun/ecom_backend:latest
        # Одновременный билд и пуш образа в Docker Hub
      - name: Push to Docker Hub gateway
        uses: docker/build-push-action@v3
        with:
          context: ./ecom/infra/
          push: true
          tags: dartanyun/ecom_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v4
      # Копируем docker-compose.production.yml на продакшен-сервер
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
        # Передаём параметры для action appleboy/scp-action:
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "ecom/infra/docker-compose.production.yml"
          target: "ambassadors"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # Параметр script передаёт в action appleboy/ssh-action команды,
          # которые нужно выполнить на сервере,
          # с которым установлено соединение
          script: |
            cd ambassadors
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
